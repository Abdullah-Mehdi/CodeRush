{"ast":null,"code":"var _jsxFileName = \"/Users/sabria/Downloads/University/CS321/CR-Docker/CodeRush/frontend-final/src/ProblemPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useParams, Link } from 'react-router-dom';\nimport { Div, Text, Button } from 'atomize';\nimport Editor from \"@monaco-editor/react\";\n\n// Import mockProblems data\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst mockProblems = [{\n  id: 1,\n  title: \"Two Sum\",\n  description: \"Return indices of two numbers that add up to a target value in an array.\",\n  difficulty: \"Easy\"\n}, {\n  id: 2,\n  title: \"Longest Common Prefix\",\n  description: \"Find the longest common prefix string in an array of strings.\",\n  difficulty: \"Easy\"\n}, {\n  id: 3,\n  title: \"Palindrome Number\",\n  description: \"Determine if a given integer is a palindrome.\",\n  difficulty: \"Easy\"\n}, {\n  id: 4,\n  title: \"Add Two Numbers\",\n  description: \"Add two linked lists representing numbers and return the sum as a linked list.\",\n  difficulty: \"Medium\"\n}, {\n  id: 5,\n  title: \"Longest Palindromic Substring\",\n  description: \"Return the longest palindromic substring in a given string.\",\n  difficulty: \"Medium\"\n}, {\n  id: 6,\n  title: \"Longest Substring Without Repeating Characters\",\n  description: \"Find the length of the longest substring without repeating characters.\",\n  difficulty: \"Medium\"\n}, {\n  id: 7,\n  title: \"Median of Two Sorted Arrays\",\n  description: \"Find the median of two sorted arrays.\",\n  difficulty: \"Hard\"\n}, {\n  id: 8,\n  title: \"Regular Expression Matching\",\n  description: \"Implement regex matching with '.' and '*' for a given pattern and string.\",\n  difficulty: \"Hard\"\n}];\nconst testCases = {\n  1: [\n  // Two Sum\n  {\n    input: {\n      nums: [2, 7, 11, 15],\n      target: 9\n    },\n    expected: [0, 1]\n  }, {\n    input: {\n      nums: [3, 2, 4],\n      target: 6\n    },\n    expected: [1, 2]\n  }],\n  2: [\n  // Longest Common Prefix\n  {\n    input: {\n      strs: [\"flower\", \"flow\", \"flight\"]\n    },\n    expected: \"fl\"\n  }, {\n    input: {\n      strs: [\"dog\", \"racecar\", \"car\"]\n    },\n    expected: \"\"\n  }, {\n    input: {\n      strs: [\"interspecies\", \"interstellar\", \"interstate\"]\n    },\n    expected: \"inters\"\n  }],\n  3: [\n  // Palindrome Number test cases\n  {\n    input: {\n      num: 121\n    },\n    expected: true\n  }, {\n    input: {\n      num: -121\n    },\n    expected: false\n  }, {\n    input: {\n      num: 10\n    },\n    expected: false\n  }, {\n    input: {\n      num: 12321\n    },\n    expected: true\n  }]\n  // Add test cases for other problems as needed\n};\nconst ProblemPage = ({\n  isDuelMode\n}) => {\n  _s();\n  const {\n    id\n  } = useParams();\n  const [code, setCode] = useState('# Start coding here\\n');\n  const [output, setOutput] = useState('');\n  const [isCorrect, setIsCorrect] = useState(null);\n  const [language, setLanguage] = useState('python');\n  const [timeLeft, setTimeLeft] = useState(900);\n  const [processing, setProcessing] = useState(false);\n  const [pyodide, setPyodide] = useState(null);\n  const [currentProblem, setCurrentProblem] = useState(null);\n  const [isTimeUp, setIsTimeUp] = useState(false);\n  const [messages, setMessages] = useState([]); // Web socket for real-time messaging\n  const [playerMessage, setPlayerMessage] = useState(''); // Web socket for real-time messaging\n  const [socket, setSocket] = useState(null); // Web socket for real-time messaging\n\n  // Helper function to compare arrays - definining it before use\n  const arraysEqual = (arr1, arr2) => {\n    if (arr1.length !== arr2.length) return false;\n    const sorted1 = [...arr1].sort();\n    const sorted2 = [...arr2].sort();\n    return sorted1.every((value, index) => value === sorted2[index]);\n  };\n\n  // Initialize Pyodide\n  useEffect(() => {\n    const loadPyodide = async () => {\n      try {\n        const pyodideInstance = await window.loadPyodide({\n          indexURL: \"https://cdn.jsdelivr.net/pyodide/v0.24.1/full/\"\n        });\n        setPyodide(pyodideInstance);\n      } catch (error) {\n        console.error('Error loading Pyodide:', error);\n        setOutput('Error loading Python environment');\n      }\n    };\n    loadPyodide();\n  }, []);\n\n  // Load current problem\n  useEffect(() => {\n    const problem = mockProblems.find(p => p.id === parseInt(id));\n    setCurrentProblem(problem);\n  }, [id]);\n\n  // Web socket for duel mode\n  // Inside ProblemPage, check if isDuelMode is true and establish a WebSocket connection.\n  useEffect(() => {\n    if (isDuelMode) {\n      const ws = new WebSocket('ws://localhost:8080/ws/duel');\n      setSocket(ws);\n      ws.onmessage = event => {\n        const data = JSON.parse(event.data);\n        console.log(\"Duel update received:\", data);\n        setMessages(prev => [...prev, data.message]); // Update duel messages\n      };\n      ws.onclose = () => {\n        console.log(\"WebSocket connection closed.\");\n      };\n      return () => ws.close(); // Cleanup on unmount\n    }\n  }, [isDuelMode]);\n\n  // Web socket for duel mode\n  // When ProblemPage loads in DuelMode, send a START_DUEL message to the backend.\n  useEffect(() => {\n    if (isDuelMode && socket) {\n      const duelStartMessage = {\n        type: \"START_DUEL\",\n        duelId: \"duel123\",\n        // Replace with unique ID for the duel\n        playerA: \"Player1\",\n        // Replace with actual player data\n        playerB: \"Player2\" // Replace with actual player data\n      };\n      socket.send(JSON.stringify(duelStartMessage));\n      console.log(\"Duel started!\");\n    }\n  }, [isDuelMode, socket]);\n  {/* Web socket for real-time messaging*/}\n  useEffect(() => {\n    // Create WebSocket connection\n    const ws = new WebSocket('ws://localhost:8080/ws/duel');\n    setSocket(ws);\n\n    // Listen for messages\n    ws.onmessage = event => {\n      setMessages(prevMessages => [...prevMessages, event.data]);\n    };\n\n    // Cleanup on component unmount\n    return () => ws.close();\n  }, []);\n  {/* Web socket for real-time messaging*/}\n  const sendMessage = () => {\n    if (socket && playerMessage.trim()) {\n      socket.send(playerMessage);\n      setPlayerMessage(''); // Clear input field\n    }\n  };\n\n  // Timer logic with time up handling\n  useEffect(() => {\n    if (isDuelMode && timeLeft > 0) {\n      const timer = setInterval(() => {\n        setTimeLeft(prev => {\n          if (prev <= 1) {\n            clearInterval(timer);\n            setIsTimeUp(true);\n            return 0;\n          }\n          return prev - 1;\n        });\n      }, 1000);\n      return () => clearInterval(timer);\n    }\n  }, [isDuelMode]);\n  const handleLanguageChange = e => {\n    setLanguage(e.target.value);\n    setCode(e.target.value === 'python' ? '# Start coding here\\n' : '// Start coding here\\n');\n  };\n  const handleRunCode = async () => {\n    if (!pyodide) {\n      setOutput('Python environment is not ready yet. Please wait...');\n      return;\n    }\n    setProcessing(true);\n    try {\n      // Redirect Python's stdout to capture print statements\n      pyodide.runPython(`\n                import sys\n                import io\n                sys.stdout = io.StringIO()\n            `);\n      await pyodide.runPythonAsync(code);\n      const stdout = pyodide.runPython(\"sys.stdout.getvalue()\");\n      setOutput(stdout || 'No output');\n    } catch (error) {\n      setOutput(`Error: ${error.message}`);\n    } finally {\n      setProcessing(false);\n    }\n  };\n  const handleSubmitSolution = async () => {\n    if (!pyodide) {\n      setOutput('Python environment is not ready yet. Please wait...');\n      return;\n    }\n    setProcessing(true);\n    try {\n      const currentTestCases = testCases[parseInt(id)];\n      if (!currentTestCases) {\n        setOutput('No test cases found for this problem.');\n        setIsCorrect(false);\n        return;\n      }\n      let allTestsPassed = true;\n      let testResults = [];\n      for (const testCase of currentTestCases) {\n        try {\n          // Reset stdout for each test case\n          pyodide.runPython(`\n                    import sys\n                    import io\n                    sys.stdout = io.StringIO()\n                `);\n\n          // Different wrapper based on problem ID\n          let wrapper;\n          const problemId = parseInt(id);\n          if (problemId === 1) {\n            wrapper = `\n${code}\n\n# Test case input\nnums = ${JSON.stringify(testCase.input.nums)}\ntarget = ${testCase.input.target}\n\n# Run the solution\nresult = two_sum(nums, target)\nprint(result)\n                    `;\n          } else if (problemId === 2) {\n            wrapper = `\n${code}\n\n# Test case input\nstrs = ${JSON.stringify(testCase.input.strs)}\n\n# Run the solution\nresult = longest_common_prefix(strs)\nprint(result)\n                    `;\n          } else if (problemId === 3) {\n            wrapper = `\n${code}\n\n# Test case input\nnum = ${testCase.input.num}\n\n# Run the solution\nresult = is_palindrome(num)\nprint(str(result).lower())\n                    `;\n          }\n          await pyodide.runPythonAsync(wrapper);\n          const output = pyodide.runPython(\"sys.stdout.getvalue()\").trim();\n\n          // Different comparison logic based on problem ID\n          let isTestPassed;\n          if (problemId === 1) {\n            const result = JSON.parse(output.replace(/\\(/g, '[').replace(/\\)/g, ']'));\n            isTestPassed = arraysEqual(result, testCase.expected);\n          } else if (problemId === 2) {\n            isTestPassed = output === `\"${testCase.expected}\"` || output === `'${testCase.expected}'` || output === testCase.expected;\n          } else if (problemId === 3) {\n            const resultBool = output.trim() === 'true';\n            isTestPassed = resultBool === testCase.expected;\n          }\n          testResults.push({\n            input: testCase.input,\n            expected: testCase.expected,\n            output: problemId === 3 ? output.trim() === 'true' : problemId === 1 ? JSON.parse(output.replace(/\\(/g, '[').replace(/\\)/g, ']')) : output.replace(/['\"]/g, ''),\n            passed: isTestPassed\n          });\n          if (!isTestPassed) {\n            allTestsPassed = false;\n          }\n        } catch (error) {\n          testResults.push({\n            input: testCase.input,\n            error: error.message,\n            passed: false\n          });\n          allTestsPassed = false;\n        }\n      }\n      const resultOutput = formatTestResults(testResults);\n      setOutput(resultOutput);\n      setIsCorrect(allTestsPassed);\n    } catch (error) {\n      setOutput(`Error: ${error.message}`);\n      setIsCorrect(false);\n    } finally {\n      setProcessing(false);\n    }\n  };\n  const formatTestResults = results => {\n    const problemId = parseInt(id);\n    return results.map((result, index) => {\n      if (result.error) {\n        if (problemId === 1) {\n          return `Test Case ${index + 1}: Failed\\nInput: nums=${JSON.stringify(result.input.nums)}, target=${result.input.target}\\nError: ${result.error}\\n`;\n        } else if (problemId === 2) {\n          return `Test Case ${index + 1}: Failed\\nInput: strs=${JSON.stringify(result.input.strs)}\\nError: ${result.error}\\n`;\n        } else if (problemId === 3) {\n          return `Test Case ${index + 1}: Failed\\nInput: num=${result.input.num}\\nError: ${result.error}\\n`;\n        }\n      }\n      if (problemId === 1) {\n        return `Test Case ${index + 1}: ${result.passed ? 'Passed' : 'Failed'}\\nInput: nums=${JSON.stringify(result.input.nums)}, target=${result.input.target}\\nExpected: ${JSON.stringify(result.expected)}\\nGot: ${JSON.stringify(result.output)}\\n`;\n      } else if (problemId === 2) {\n        return `Test Case ${index + 1}: ${result.passed ? 'Passed' : 'Failed'}\\nInput: strs=${JSON.stringify(result.input.strs)}\\nExpected: \"${result.expected}\"\\nGot: \"${result.output}\"\\n`;\n      } else if (problemId === 3) {\n        return `Test Case ${index + 1}: ${result.passed ? 'Passed' : 'Failed'}\\nInput: num=${result.input.num}\\nExpected: ${result.expected}\\nGot: ${result.output}\\n`;\n      }\n    }).join('\\n');\n  };\n\n  // Add initial code template based on problem ID\n  useEffect(() => {\n    const problemId = parseInt(id);\n    if (problemId === 1) {\n      setCode(`def two_sum(nums, target):\n    # Write your solution here\n    # Return indices of two numbers that add up to target\n    # Example: nums = [2,7,11,15], target = 9 should return [0,1]\n    pass`);\n    } else if (problemId === 2) {\n      setCode(`def longest_common_prefix(strs):\n    # Write your solution here\n    # Return the longest common prefix string\n    # Example: [\"flower\", \"flow\", \"flight\"] should return \"fl\"\n    pass`);\n    } else if (problemId === 3) {\n      setCode(`def is_palindrome(num):\n    # Write your solution here\n    # Return True if the number is a palindrome, False otherwise\n    # Example: 121 should return True because it reads the same forward and backward\n    pass`);\n    }\n  }, [id]);\n  if (!currentProblem) {\n    return /*#__PURE__*/_jsxDEV(Div, {\n      children: \"Loading problem...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 406,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(Div, {\n    d: \"flex\",\n    flexDir: \"row\",\n    minH: \"100vh\",\n    p: \"2rem\",\n    children: [/*#__PURE__*/_jsxDEV(Div, {\n      w: \"50%\",\n      p: \"1rem\",\n      border: \"1px solid #e0e0e0\",\n      shadow: \"4\",\n      rounded: \"lg\",\n      children: [/*#__PURE__*/_jsxDEV(Text, {\n        tag: \"h2\",\n        textSize: \"title\",\n        m: {\n          b: \"1rem\"\n        },\n        children: currentProblem.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 413,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Text, {\n        textSize: \"body\",\n        textColor: \"gray700\",\n        m: {\n          b: \"1rem\"\n        },\n        children: currentProblem.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 414,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Text, {\n        textSize: \"caption\",\n        textColor: \"gray500\",\n        m: {\n          b: \"1rem\"\n        },\n        children: [\"Difficulty: \", currentProblem.difficulty]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 417,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        onChange: handleLanguageChange,\n        value: language,\n        style: {\n          marginBottom: '1rem',\n          padding: '0.5rem',\n          borderRadius: '4px',\n          border: '1px solid #e0e0e0',\n          width: '200px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"python\",\n          children: \"Python\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 433,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"java\",\n          children: \"Java\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 434,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 422,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 412,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Div, {\n      w: \"50%\",\n      p: \"1rem\",\n      children: [/*#__PURE__*/_jsxDEV(Editor, {\n        height: \"50vh\",\n        language: language,\n        value: code,\n        onChange: setCode,\n        theme: \"vs-dark\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 440,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Div, {\n        d: \"flex\",\n        justify: \"space-between\",\n        m: {\n          y: \"1rem\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleRunCode,\n          bg: \"info700\",\n          hoverBg: \"info800\",\n          textColor: \"white\",\n          disabled: processing || !pyodide,\n          w: \"45%\",\n          children: processing ? 'Running...' : 'Run Code'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 448,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleSubmitSolution,\n          bg: \"success700\",\n          hoverBg: \"success800\",\n          textColor: \"white\",\n          disabled: processing || isDuelMode && isTimeUp,\n          w: \"45%\",\n          opacity: isDuelMode && isTimeUp ? \"0.5\" : \"1\",\n          children: \"Submit Solution\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 458,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 447,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Div, {\n        bg: \"gray100\",\n        p: \"1rem\",\n        rounded: \"md\",\n        children: /*#__PURE__*/_jsxDEV(Text, {\n          tag: \"pre\",\n          textSize: \"body\",\n          children: output\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 473,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 472,\n        columnNumber: 17\n      }, this), isDuelMode && /*#__PURE__*/_jsxDEV(Text, {\n        textSize: \"body\",\n        m: {\n          t: \"1rem\"\n        },\n        textColor: isTimeUp ? \"danger700\" : \"gray800\",\n        d: \"flex\",\n        justify: \"center\",\n        bold: isTimeUp,\n        children: [\"Time Left: \", Math.floor(timeLeft / 60), \":\", timeLeft % 60 < 10 ? '0' : '', timeLeft % 60]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 480,\n        columnNumber: 21\n      }, this), isDuelMode && isTimeUp && /*#__PURE__*/_jsxDEV(Div, {\n        bg: \"danger100\",\n        p: \"1rem\",\n        rounded: \"md\",\n        m: {\n          t: \"1rem\"\n        },\n        border: \"1px solid\",\n        borderColor: \"danger700\",\n        children: [/*#__PURE__*/_jsxDEV(Text, {\n          textAlign: \"center\",\n          textColor: \"danger700\",\n          textSize: \"body\",\n          children: [\"Time's up! You can no longer submit your solution, but you can still:\", /*#__PURE__*/_jsxDEV(\"ul\", {\n            style: {\n              marginTop: '0.5rem',\n              marginBottom: '0.5rem'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"li\", {\n              children: \"Run the code to test it\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 509,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n              children: \"Copy your code and try it in Practice mode\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 510,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 508,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 502,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Link, {\n          to: `/practice-mode/${id}`,\n          style: {\n            textDecoration: 'none'\n          },\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            bg: \"info700\",\n            hoverBg: \"info800\",\n            textColor: \"white\",\n            w: \"100%\",\n            m: {\n              t: \"0.5rem\"\n            },\n            children: \"Go to Practice Mode\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 517,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 513,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 494,\n        columnNumber: 21\n      }, this), isDuelMode && /*#__PURE__*/_jsxDEV(Div, {\n        bg: \"gray100\",\n        p: \"1rem\",\n        rounded: \"md\",\n        m: {\n          t: \"1rem\"\n        },\n        border: \"1px solid\",\n        borderColor: \"gray300\",\n        h: \"200px\",\n        overflow: \"scroll\",\n        children: [/*#__PURE__*/_jsxDEV(Text, {\n          textSize: \"subheader\",\n          m: {\n            b: \"1rem\"\n          },\n          children: \"Duel Updates:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 542,\n          columnNumber: 25\n        }, this), messages.length > 0 ? messages.map((msg, index) => /*#__PURE__*/_jsxDEV(Text, {\n          textSize: \"body\",\n          textColor: \"gray800\",\n          children: msg\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 547,\n          columnNumber: 33\n        }, this)) : /*#__PURE__*/_jsxDEV(Text, {\n          textSize: \"body\",\n          textColor: \"gray500\",\n          children: \"Waiting for updates...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 552,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 532,\n        columnNumber: 21\n      }, this), isDuelMode && /*#__PURE__*/_jsxDEV(Div, {\n        bg: \"gray100\",\n        p: \"1rem\",\n        rounded: \"md\",\n        m: {\n          t: \"1rem\"\n        },\n        border: \"1px solid\",\n        borderColor: \"gray300\",\n        h: \"200px\",\n        overflow: \"scroll\",\n        children: [/*#__PURE__*/_jsxDEV(Text, {\n          textSize: \"subheader\",\n          m: {\n            b: \"1rem\"\n          },\n          children: \"Real-Time Messages:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 572,\n          columnNumber: 25\n        }, this), messages.length > 0 ? messages.map((msg, index) => /*#__PURE__*/_jsxDEV(Text, {\n          textSize: \"body\",\n          textColor: \"gray800\",\n          children: msg\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 577,\n          columnNumber: 33\n        }, this)) : /*#__PURE__*/_jsxDEV(Text, {\n          textSize: \"body\",\n          textColor: \"gray500\",\n          children: \"No messages yet.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 582,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 562,\n        columnNumber: 21\n      }, this), isDuelMode && /*#__PURE__*/_jsxDEV(Div, {\n        d: \"flex\",\n        m: {\n          t: \"1rem\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: playerMessage,\n          onChange: e => setPlayerMessage(e.target.value),\n          placeholder: \"Type a message...\",\n          style: {\n            flex: 1,\n            padding: '0.5rem',\n            marginRight: '0.5rem',\n            borderRadius: '4px',\n            border: '1px solid #ccc'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 593,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: sendMessage,\n          bg: \"info700\",\n          hoverBg: \"info800\",\n          textColor: \"white\",\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 606,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 592,\n        columnNumber: 21\n      }, this), isCorrect !== null && /*#__PURE__*/_jsxDEV(Text, {\n        textSize: \"body\",\n        textColor: isCorrect ? \"success700\" : \"danger700\",\n        m: {\n          t: \"1rem\"\n        },\n        children: isCorrect ? \"All test cases passed!\" : \"Some test cases failed. Please try again.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 619,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 439,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 410,\n    columnNumber: 9\n  }, this);\n};\n_s(ProblemPage, \"PmpnL3/jGZFaApwV4Thpn8YCUCE=\", false, function () {\n  return [useParams];\n});\n_c = ProblemPage;\nexport default ProblemPage;\nvar _c;\n$RefreshReg$(_c, \"ProblemPage\");","map":{"version":3,"names":["React","useState","useEffect","useParams","Link","Div","Text","Button","Editor","jsxDEV","_jsxDEV","mockProblems","id","title","description","difficulty","testCases","input","nums","target","expected","strs","num","ProblemPage","isDuelMode","_s","code","setCode","output","setOutput","isCorrect","setIsCorrect","language","setLanguage","timeLeft","setTimeLeft","processing","setProcessing","pyodide","setPyodide","currentProblem","setCurrentProblem","isTimeUp","setIsTimeUp","messages","setMessages","playerMessage","setPlayerMessage","socket","setSocket","arraysEqual","arr1","arr2","length","sorted1","sort","sorted2","every","value","index","loadPyodide","pyodideInstance","window","indexURL","error","console","problem","find","p","parseInt","ws","WebSocket","onmessage","event","data","JSON","parse","log","prev","message","onclose","close","duelStartMessage","type","duelId","playerA","playerB","send","stringify","prevMessages","sendMessage","trim","timer","setInterval","clearInterval","handleLanguageChange","e","handleRunCode","runPython","runPythonAsync","stdout","handleSubmitSolution","currentTestCases","allTestsPassed","testResults","testCase","wrapper","problemId","isTestPassed","result","replace","resultBool","push","passed","resultOutput","formatTestResults","results","map","join","children","fileName","_jsxFileName","lineNumber","columnNumber","d","flexDir","minH","w","border","shadow","rounded","tag","textSize","m","b","textColor","onChange","style","marginBottom","padding","borderRadius","width","height","theme","justify","y","onClick","bg","hoverBg","disabled","opacity","t","bold","Math","floor","borderColor","textAlign","marginTop","to","textDecoration","h","overflow","msg","placeholder","flex","marginRight","_c","$RefreshReg$"],"sources":["/Users/sabria/Downloads/University/CS321/CR-Docker/CodeRush/frontend-final/src/ProblemPage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useParams, Link } from 'react-router-dom';\nimport { Div, Text, Button } from 'atomize';\nimport Editor from \"@monaco-editor/react\";\n\n// Import mockProblems data\nconst mockProblems = [\n    { id: 1, title: \"Two Sum\", description: \"Return indices of two numbers that add up to a target value in an array.\", difficulty: \"Easy\" },\n    { id: 2, title: \"Longest Common Prefix\", description: \"Find the longest common prefix string in an array of strings.\", difficulty: \"Easy\" },\n    { id: 3, title: \"Palindrome Number\", description: \"Determine if a given integer is a palindrome.\", difficulty: \"Easy\" },\n    { id: 4, title: \"Add Two Numbers\", description: \"Add two linked lists representing numbers and return the sum as a linked list.\", difficulty: \"Medium\" },\n    { id: 5, title: \"Longest Palindromic Substring\", description: \"Return the longest palindromic substring in a given string.\", difficulty: \"Medium\" },\n    { id: 6, title: \"Longest Substring Without Repeating Characters\", description: \"Find the length of the longest substring without repeating characters.\", difficulty: \"Medium\" },\n    { id: 7, title: \"Median of Two Sorted Arrays\", description: \"Find the median of two sorted arrays.\", difficulty: \"Hard\" },\n    { id: 8, title: \"Regular Expression Matching\", description: \"Implement regex matching with '.' and '*' for a given pattern and string.\", difficulty: \"Hard\" },\n];\n\nconst testCases = {\n    1: [ // Two Sum\n        {\n            input: {\n                nums: [2, 7, 11, 15],\n                target: 9\n            },\n            expected: [0, 1]\n        },\n        {\n            input: {\n                nums: [3, 2, 4],\n                target: 6\n            },\n            expected: [1, 2]\n        }\n    ],\n\n    2: [ // Longest Common Prefix\n        {\n            input: {\n                strs: [\"flower\", \"flow\", \"flight\"]\n            },\n            expected: \"fl\"\n        },\n        {\n            input: {\n                strs: [\"dog\", \"racecar\", \"car\"]\n            },\n            expected: \"\"\n        },\n        {\n            input: {\n                strs: [\"interspecies\", \"interstellar\", \"interstate\"]\n            },\n            expected: \"inters\"\n        }\n    ],\n\n    3: [ // Palindrome Number test cases\n        {\n            input: {\n                num: 121\n            },\n            expected: true\n        },\n        {\n            input: {\n                num: -121\n            },\n            expected: false\n        },\n        {\n            input: {\n                num: 10\n            },\n            expected: false\n        },\n        {\n            input: {\n                num: 12321\n            },\n            expected: true\n        }\n    ]\n    // Add test cases for other problems as needed\n};\n\nconst ProblemPage = ({ isDuelMode }) => {\n    const { id } = useParams();\n    const [code, setCode] = useState('# Start coding here\\n');\n    const [output, setOutput] = useState('');\n    const [isCorrect, setIsCorrect] = useState(null);\n    const [language, setLanguage] = useState('python');\n    const [timeLeft, setTimeLeft] = useState(900);\n    const [processing, setProcessing] = useState(false);\n    const [pyodide, setPyodide] = useState(null);\n    const [currentProblem, setCurrentProblem] = useState(null);\n    const [isTimeUp, setIsTimeUp] = useState(false);\n    const [messages, setMessages] = useState([]); // Web socket for real-time messaging\n    const [playerMessage, setPlayerMessage] = useState(''); // Web socket for real-time messaging\n    const [socket, setSocket] = useState(null); // Web socket for real-time messaging\n\n    // Helper function to compare arrays - definining it before use\n    const arraysEqual = (arr1, arr2) => {\n        if (arr1.length !== arr2.length) return false;\n        const sorted1 = [...arr1].sort();\n        const sorted2 = [...arr2].sort();\n        return sorted1.every((value, index) => value === sorted2[index]);\n    };\n\n    // Initialize Pyodide\n    useEffect(() => {\n        const loadPyodide = async () => {\n            try {\n                const pyodideInstance = await window.loadPyodide({\n                    indexURL: \"https://cdn.jsdelivr.net/pyodide/v0.24.1/full/\"\n                });\n                setPyodide(pyodideInstance);\n            } catch (error) {\n                console.error('Error loading Pyodide:', error);\n                setOutput('Error loading Python environment');\n            }\n        };\n        loadPyodide();\n    }, []);\n\n    // Load current problem\n    useEffect(() => {\n        const problem = mockProblems.find(p => p.id === parseInt(id));\n        setCurrentProblem(problem);\n    }, [id]);\n\n    // Web socket for duel mode\n    // Inside ProblemPage, check if isDuelMode is true and establish a WebSocket connection.\n    useEffect(() => {\n        if (isDuelMode) {\n            const ws = new WebSocket('ws://localhost:8080/ws/duel');\n            setSocket(ws);\n\n            ws.onmessage = (event) => {\n                const data = JSON.parse(event.data);\n                console.log(\"Duel update received:\", data);\n                setMessages((prev) => [...prev, data.message]); // Update duel messages\n            };\n\n            ws.onclose = () => {\n                console.log(\"WebSocket connection closed.\");\n            };\n\n            return () => ws.close(); // Cleanup on unmount\n        }\n    }, [isDuelMode]);\n\n    // Web socket for duel mode\n    // When ProblemPage loads in DuelMode, send a START_DUEL message to the backend.\n    useEffect(() => {\n        if (isDuelMode && socket) {\n            const duelStartMessage = {\n                type: \"START_DUEL\",\n                duelId: \"duel123\", // Replace with unique ID for the duel\n                playerA: \"Player1\", // Replace with actual player data\n                playerB: \"Player2\", // Replace with actual player data\n            };\n            socket.send(JSON.stringify(duelStartMessage));\n            console.log(\"Duel started!\");\n        }\n    }, [isDuelMode, socket]);\n\n\n\n    {/* Web socket for real-time messaging*/ }\n    useEffect(() => {\n        // Create WebSocket connection\n        const ws = new WebSocket('ws://localhost:8080/ws/duel');\n        setSocket(ws);\n\n        // Listen for messages\n        ws.onmessage = (event) => {\n            setMessages((prevMessages) => [...prevMessages, event.data]);\n        };\n\n        // Cleanup on component unmount\n        return () => ws.close();\n    }, []);\n\n    {/* Web socket for real-time messaging*/ }\n    const sendMessage = () => {\n        if (socket && playerMessage.trim()) {\n            socket.send(playerMessage);\n            setPlayerMessage(''); // Clear input field\n        }\n    };\n\n    // Timer logic with time up handling\n    useEffect(() => {\n        if (isDuelMode && timeLeft > 0) {\n            const timer = setInterval(() => {\n                setTimeLeft(prev => {\n                    if (prev <= 1) {\n                        clearInterval(timer);\n                        setIsTimeUp(true);\n                        return 0;\n                    }\n                    return prev - 1;\n                });\n            }, 1000);\n            return () => clearInterval(timer);\n        }\n    }, [isDuelMode]);\n\n    const handleLanguageChange = (e) => {\n        setLanguage(e.target.value);\n        setCode(e.target.value === 'python' ? '# Start coding here\\n' : '// Start coding here\\n');\n    };\n\n    const handleRunCode = async () => {\n        if (!pyodide) {\n            setOutput('Python environment is not ready yet. Please wait...');\n            return;\n        }\n\n        setProcessing(true);\n        try {\n            // Redirect Python's stdout to capture print statements\n            pyodide.runPython(`\n                import sys\n                import io\n                sys.stdout = io.StringIO()\n            `);\n\n            await pyodide.runPythonAsync(code);\n            const stdout = pyodide.runPython(\"sys.stdout.getvalue()\");\n            setOutput(stdout || 'No output');\n        } catch (error) {\n            setOutput(`Error: ${error.message}`);\n        } finally {\n            setProcessing(false);\n        }\n    };\n\n    const handleSubmitSolution = async () => {\n        if (!pyodide) {\n            setOutput('Python environment is not ready yet. Please wait...');\n            return;\n        }\n\n        setProcessing(true);\n        try {\n            const currentTestCases = testCases[parseInt(id)];\n            if (!currentTestCases) {\n                setOutput('No test cases found for this problem.');\n                setIsCorrect(false);\n                return;\n            }\n\n            let allTestsPassed = true;\n            let testResults = [];\n\n            for (const testCase of currentTestCases) {\n                try {\n                    // Reset stdout for each test case\n                    pyodide.runPython(`\n                    import sys\n                    import io\n                    sys.stdout = io.StringIO()\n                `);\n\n                    // Different wrapper based on problem ID\n                    let wrapper;\n                    const problemId = parseInt(id);\n\n                    if (problemId === 1) {\n                        wrapper = `\n${code}\n\n# Test case input\nnums = ${JSON.stringify(testCase.input.nums)}\ntarget = ${testCase.input.target}\n\n# Run the solution\nresult = two_sum(nums, target)\nprint(result)\n                    `;\n                    } else if (problemId === 2) {\n                        wrapper = `\n${code}\n\n# Test case input\nstrs = ${JSON.stringify(testCase.input.strs)}\n\n# Run the solution\nresult = longest_common_prefix(strs)\nprint(result)\n                    `;\n                    } else if (problemId === 3) {\n                        wrapper = `\n${code}\n\n# Test case input\nnum = ${testCase.input.num}\n\n# Run the solution\nresult = is_palindrome(num)\nprint(str(result).lower())\n                    `;\n                    }\n\n                    await pyodide.runPythonAsync(wrapper);\n                    const output = pyodide.runPython(\"sys.stdout.getvalue()\").trim();\n\n                    // Different comparison logic based on problem ID\n                    let isTestPassed;\n                    if (problemId === 1) {\n                        const result = JSON.parse(output.replace(/\\(/g, '[').replace(/\\)/g, ']'));\n                        isTestPassed = arraysEqual(result, testCase.expected);\n                    } else if (problemId === 2) {\n                        isTestPassed = output === `\"${testCase.expected}\"` ||\n                            output === `'${testCase.expected}'` ||\n                            output === testCase.expected;\n                    } else if (problemId === 3) {\n                        const resultBool = output.trim() === 'true';\n                        isTestPassed = resultBool === testCase.expected;\n                    }\n\n                    testResults.push({\n                        input: testCase.input,\n                        expected: testCase.expected,\n                        output: problemId === 3 ? output.trim() === 'true' :\n                            problemId === 1 ? JSON.parse(output.replace(/\\(/g, '[').replace(/\\)/g, ']')) :\n                                output.replace(/['\"]/g, ''),\n                        passed: isTestPassed\n                    });\n\n                    if (!isTestPassed) {\n                        allTestsPassed = false;\n                    }\n\n                } catch (error) {\n                    testResults.push({\n                        input: testCase.input,\n                        error: error.message,\n                        passed: false\n                    });\n                    allTestsPassed = false;\n                }\n            }\n\n            const resultOutput = formatTestResults(testResults);\n            setOutput(resultOutput);\n            setIsCorrect(allTestsPassed);\n\n        } catch (error) {\n            setOutput(`Error: ${error.message}`);\n            setIsCorrect(false);\n        } finally {\n            setProcessing(false);\n        }\n    };\n\n    const formatTestResults = (results) => {\n        const problemId = parseInt(id);\n        return results.map((result, index) => {\n            if (result.error) {\n                if (problemId === 1) {\n                    return `Test Case ${index + 1}: Failed\\nInput: nums=${JSON.stringify(result.input.nums)}, target=${result.input.target}\\nError: ${result.error}\\n`;\n                } else if (problemId === 2) {\n                    return `Test Case ${index + 1}: Failed\\nInput: strs=${JSON.stringify(result.input.strs)}\\nError: ${result.error}\\n`;\n                } else if (problemId === 3) {\n                    return `Test Case ${index + 1}: Failed\\nInput: num=${result.input.num}\\nError: ${result.error}\\n`;\n                }\n            }\n\n            if (problemId === 1) {\n                return `Test Case ${index + 1}: ${result.passed ? 'Passed' : 'Failed'}\\nInput: nums=${JSON.stringify(result.input.nums)}, target=${result.input.target}\\nExpected: ${JSON.stringify(result.expected)}\\nGot: ${JSON.stringify(result.output)}\\n`;\n            } else if (problemId === 2) {\n                return `Test Case ${index + 1}: ${result.passed ? 'Passed' : 'Failed'}\\nInput: strs=${JSON.stringify(result.input.strs)}\\nExpected: \"${result.expected}\"\\nGot: \"${result.output}\"\\n`;\n            } else if (problemId === 3) {\n                return `Test Case ${index + 1}: ${result.passed ? 'Passed' : 'Failed'}\\nInput: num=${result.input.num}\\nExpected: ${result.expected}\\nGot: ${result.output}\\n`;\n            }\n        }).join('\\n');\n    };\n\n    // Add initial code template based on problem ID\n    useEffect(() => {\n        const problemId = parseInt(id);\n        if (problemId === 1) {\n            setCode(`def two_sum(nums, target):\n    # Write your solution here\n    # Return indices of two numbers that add up to target\n    # Example: nums = [2,7,11,15], target = 9 should return [0,1]\n    pass`);\n        } else if (problemId === 2) {\n            setCode(`def longest_common_prefix(strs):\n    # Write your solution here\n    # Return the longest common prefix string\n    # Example: [\"flower\", \"flow\", \"flight\"] should return \"fl\"\n    pass`);\n        } else if (problemId === 3) {\n            setCode(`def is_palindrome(num):\n    # Write your solution here\n    # Return True if the number is a palindrome, False otherwise\n    # Example: 121 should return True because it reads the same forward and backward\n    pass`);\n        }\n    }, [id]);\n\n    if (!currentProblem) {\n        return <Div>Loading problem...</Div>;\n    }\n\n    return (\n        <Div d=\"flex\" flexDir=\"row\" minH=\"100vh\" p=\"2rem\">\n            {/* Left Side: Problem Details */}\n            <Div w=\"50%\" p=\"1rem\" border=\"1px solid #e0e0e0\" shadow=\"4\" rounded=\"lg\">\n                <Text tag=\"h2\" textSize=\"title\" m={{ b: \"1rem\" }}>{currentProblem.title}</Text>\n                <Text textSize=\"body\" textColor=\"gray700\" m={{ b: \"1rem\" }}>\n                    {currentProblem.description}\n                </Text>\n                <Text textSize=\"caption\" textColor=\"gray500\" m={{ b: \"1rem\" }}>\n                    Difficulty: {currentProblem.difficulty}\n                </Text>\n\n                {/* Language Selection */}\n                <select\n                    onChange={handleLanguageChange}\n                    value={language}\n                    style={{\n                        marginBottom: '1rem',\n                        padding: '0.5rem',\n                        borderRadius: '4px',\n                        border: '1px solid #e0e0e0',\n                        width: '200px'\n                    }}\n                >\n                    <option value=\"python\">Python</option>\n                    <option value=\"java\">Java</option>\n                </select>\n            </Div>\n\n            {/* Right Side: Code Editor and Output */}\n            <Div w=\"50%\" p=\"1rem\">\n                <Editor\n                    height=\"50vh\"\n                    language={language}\n                    value={code}\n                    onChange={setCode}\n                    theme=\"vs-dark\"\n                />\n                <Div d=\"flex\" justify=\"space-between\" m={{ y: \"1rem\" }}>\n                    <Button\n                        onClick={handleRunCode}\n                        bg=\"info700\"\n                        hoverBg=\"info800\"\n                        textColor=\"white\"\n                        disabled={processing || !pyodide}\n                        w=\"45%\"\n                    >\n                        {processing ? 'Running...' : 'Run Code'}\n                    </Button>\n                    <Button\n                        onClick={handleSubmitSolution}\n                        bg=\"success700\"\n                        hoverBg=\"success800\"\n                        textColor=\"white\"\n                        disabled={processing || (isDuelMode && isTimeUp)}\n                        w=\"45%\"\n                        opacity={isDuelMode && isTimeUp ? \"0.5\" : \"1\"}\n                    >\n                        Submit Solution\n                    </Button>\n                </Div>\n\n                {/* Output Window */}\n                <Div bg=\"gray100\" p=\"1rem\" rounded=\"md\">\n                    <Text tag=\"pre\" textSize=\"body\">\n                        {output}\n                    </Text>\n                </Div>\n\n                {/* Timer Display */}\n                {isDuelMode && (\n                    <Text\n                        textSize=\"body\"\n                        m={{ t: \"1rem\" }}\n                        textColor={isTimeUp ? \"danger700\" : \"gray800\"}\n                        d=\"flex\"\n                        justify=\"center\"\n                        bold={isTimeUp}\n                    >\n                        Time Left: {Math.floor(timeLeft / 60)}:{timeLeft % 60 < 10 ? '0' : ''}{timeLeft % 60}\n                    </Text>\n                )}\n\n                {/* Time Up Message */}\n                {isDuelMode && isTimeUp && (\n                    <Div\n                        bg=\"danger100\"\n                        p=\"1rem\"\n                        rounded=\"md\"\n                        m={{ t: \"1rem\" }}\n                        border=\"1px solid\"\n                        borderColor=\"danger700\"\n                    >\n                        <Text\n                            textAlign=\"center\"\n                            textColor=\"danger700\"\n                            textSize=\"body\"\n                        >\n                            Time's up! You can no longer submit your solution, but you can still:\n                            <ul style={{ marginTop: '0.5rem', marginBottom: '0.5rem' }}>\n                                <li>Run the code to test it</li>\n                                <li>Copy your code and try it in Practice mode</li>\n                            </ul>\n                        </Text>\n                        <Link\n                            to={`/practice-mode/${id}`}\n                            style={{ textDecoration: 'none' }}\n                        >\n                            <Button\n                                bg=\"info700\"\n                                hoverBg=\"info800\"\n                                textColor=\"white\"\n                                w=\"100%\"\n                                m={{ t: \"0.5rem\" }}\n                            >\n                                Go to Practice Mode\n                            </Button>\n                        </Link>\n                    </Div>\n                )}\n\n                \n                {isDuelMode && (\n                    <Div\n                        bg=\"gray100\"\n                        p=\"1rem\"\n                        rounded=\"md\"\n                        m={{ t: \"1rem\" }}\n                        border=\"1px solid\"\n                        borderColor=\"gray300\"\n                        h=\"200px\"\n                        overflow=\"scroll\"\n                    >\n                        <Text textSize=\"subheader\" m={{ b: \"1rem\" }}>\n                            Duel Updates:\n                        </Text>\n                        {messages.length > 0 ? (\n                            messages.map((msg, index) => (\n                                <Text key={index} textSize=\"body\" textColor=\"gray800\">\n                                    {msg}\n                                </Text>\n                            ))\n                        ) : (\n                            <Text textSize=\"body\" textColor=\"gray500\">\n                                Waiting for updates...\n                            </Text>\n                        )}\n                    </Div>\n                )}\n\n\n                {/* Web socket for real-time messaging*/}\n                {isDuelMode && (\n                    <Div\n                        bg=\"gray100\"\n                        p=\"1rem\"\n                        rounded=\"md\"\n                        m={{ t: \"1rem\" }}\n                        border=\"1px solid\"\n                        borderColor=\"gray300\"\n                        h=\"200px\"\n                        overflow=\"scroll\"\n                    >\n                        <Text textSize=\"subheader\" m={{ b: \"1rem\" }}>\n                            Real-Time Messages:\n                        </Text>\n                        {messages.length > 0 ? (\n                            messages.map((msg, index) => (\n                                <Text key={index} textSize=\"body\" textColor=\"gray800\">\n                                    {msg}\n                                </Text>\n                            ))\n                        ) : (\n                            <Text textSize=\"body\" textColor=\"gray500\">\n                                No messages yet.\n                            </Text>\n                        )}\n                    </Div>\n                )}\n\n                {/* Web socket for real-time messaging*/}\n                {/* Message Input and Send Button */}\n                {isDuelMode && (\n                    <Div d=\"flex\" m={{ t: \"1rem\" }}>\n                        <input\n                            type=\"text\"\n                            value={playerMessage}\n                            onChange={(e) => setPlayerMessage(e.target.value)}\n                            placeholder=\"Type a message...\"\n                            style={{\n                                flex: 1,\n                                padding: '0.5rem',\n                                marginRight: '0.5rem',\n                                borderRadius: '4px',\n                                border: '1px solid #ccc',\n                            }}\n                        />\n                        <Button\n                            onClick={sendMessage}\n                            bg=\"info700\"\n                            hoverBg=\"info800\"\n                            textColor=\"white\"\n                        >\n                            Send\n                        </Button>\n                    </Div>\n                )}\n\n                {/* Solution Result Message */}\n                {isCorrect !== null && (\n                    <Text\n                        textSize=\"body\"\n                        textColor={isCorrect ? \"success700\" : \"danger700\"}\n                        m={{ t: \"1rem\" }}\n                    >\n                        {isCorrect ? \"All test cases passed!\" : \"Some test cases failed. Please try again.\"}\n                    </Text>\n                )}\n            </Div>\n        </Div>\n    );\n};\n\nexport default ProblemPage;\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}