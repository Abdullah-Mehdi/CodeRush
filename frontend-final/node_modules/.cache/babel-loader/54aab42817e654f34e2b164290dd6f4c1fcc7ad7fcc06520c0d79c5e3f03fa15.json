{"ast":null,"code":"var _jsxFileName = \"/Users/sabria/Downloads/University/CS321/CR-Docker/CodeRush/frontend-final/src/ProblemPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Div, Text, Button } from 'atomize';\nimport Editor from \"@monaco-editor/react\";\n\n// Import mockProblems data\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst mockProblems = [{\n  id: 1,\n  title: \"Two Sum\",\n  description: \"Return indices of two numbers that add up to a target value in an array.\",\n  difficulty: \"Easy\"\n}, {\n  id: 2,\n  title: \"Longest Common Prefix\",\n  description: \"Find the longest common prefix string in an array of strings.\",\n  difficulty: \"Easy\"\n}, {\n  id: 3,\n  title: \"Palindrome Number\",\n  description: \"Determine if a given integer is a palindrome.\",\n  difficulty: \"Easy\"\n}, {\n  id: 4,\n  title: \"Add Two Numbers\",\n  description: \"Add two linked lists representing numbers and return the sum as a linked list.\",\n  difficulty: \"Medium\"\n}, {\n  id: 5,\n  title: \"Longest Palindromic Substring\",\n  description: \"Return the longest palindromic substring in a given string.\",\n  difficulty: \"Medium\"\n}, {\n  id: 6,\n  title: \"Longest Substring Without Repeating Characters\",\n  description: \"Find the length of the longest substring without repeating characters.\",\n  difficulty: \"Medium\"\n}, {\n  id: 7,\n  title: \"Median of Two Sorted Arrays\",\n  description: \"Find the median of two sorted arrays.\",\n  difficulty: \"Hard\"\n}, {\n  id: 8,\n  title: \"Regular Expression Matching\",\n  description: \"Implement regex matching with '.' and '*' for a given pattern and string.\",\n  difficulty: \"Hard\"\n}];\nconst testCases = {\n  1: [\n  // Two Sum\n  {\n    input: {\n      nums: [2, 7, 11, 15],\n      target: 9\n    },\n    expected: [0, 1]\n  }, {\n    input: {\n      nums: [3, 2, 4],\n      target: 6\n    },\n    expected: [1, 2]\n  }],\n  2: [\n  // Longest Common Prefix\n  {\n    input: {\n      strs: [\"flower\", \"flow\", \"flight\"]\n    },\n    expected: \"fl\"\n  }, {\n    input: {\n      strs: [\"dog\", \"racecar\", \"car\"]\n    },\n    expected: \"\"\n  }, {\n    input: {\n      strs: [\"interspecies\", \"interstellar\", \"interstate\"]\n    },\n    expected: \"inters\"\n  }],\n  3: [\n  // Palindrome Number test cases\n  {\n    input: {\n      num: 121\n    },\n    expected: true\n  }, {\n    input: {\n      num: -121\n    },\n    expected: false\n  }, {\n    input: {\n      num: 10\n    },\n    expected: false\n  }, {\n    input: {\n      num: 12321\n    },\n    expected: true\n  }]\n  // Add test cases for other problems as needed\n};\nconst ProblemPage = ({\n  isDuelMode\n}) => {\n  _s();\n  const {\n    id\n  } = useParams();\n  const [code, setCode] = useState('# Start coding here\\n');\n  const [output, setOutput] = useState('');\n  const [isCorrect, setIsCorrect] = useState(null);\n  const [language, setLanguage] = useState('python');\n  const [timeLeft, setTimeLeft] = useState(900);\n  const [processing, setProcessing] = useState(false);\n  const [pyodide, setPyodide] = useState(null);\n  const [currentProblem, setCurrentProblem] = useState(null);\n\n  // Helper function to compare arrays - definining it before use\n  const arraysEqual = (arr1, arr2) => {\n    if (arr1.length !== arr2.length) return false;\n    const sorted1 = [...arr1].sort();\n    const sorted2 = [...arr2].sort();\n    return sorted1.every((value, index) => value === sorted2[index]);\n  };\n\n  // Initialize Pyodide\n  useEffect(() => {\n    const loadPyodide = async () => {\n      try {\n        const pyodideInstance = await window.loadPyodide({\n          indexURL: \"https://cdn.jsdelivr.net/pyodide/v0.24.1/full/\"\n        });\n        setPyodide(pyodideInstance);\n      } catch (error) {\n        console.error('Error loading Pyodide:', error);\n        setOutput('Error loading Python environment');\n      }\n    };\n    loadPyodide();\n  }, []);\n\n  // Load current problem\n  useEffect(() => {\n    const problem = mockProblems.find(p => p.id === parseInt(id));\n    setCurrentProblem(problem);\n  }, [id]);\n\n  // Timer for duel mode\n  useEffect(() => {\n    if (isDuelMode && timeLeft > 0) {\n      const timer = setInterval(() => setTimeLeft(timeLeft - 1), 1000);\n      return () => clearInterval(timer);\n    }\n  }, [isDuelMode, timeLeft]);\n  const handleLanguageChange = e => {\n    setLanguage(e.target.value);\n    setCode(e.target.value === 'python' ? '# Start coding here\\n' : '// Start coding here\\n');\n  };\n  const handleRunCode = async () => {\n    if (!pyodide) {\n      setOutput('Python environment is not ready yet. Please wait...');\n      return;\n    }\n    setProcessing(true);\n    try {\n      // Redirect Python's stdout to capture print statements\n      pyodide.runPython(`\n                import sys\n                import io\n                sys.stdout = io.StringIO()\n            `);\n      await pyodide.runPythonAsync(code);\n      const stdout = pyodide.runPython(\"sys.stdout.getvalue()\");\n      setOutput(stdout || 'No output');\n    } catch (error) {\n      setOutput(`Error: ${error.message}`);\n    } finally {\n      setProcessing(false);\n    }\n  };\n  const handleSubmitSolution = async () => {\n    if (!pyodide) {\n      setOutput('Python environment is not ready yet. Please wait...');\n      return;\n    }\n    setProcessing(true);\n    try {\n      const currentTestCases = testCases[parseInt(id)];\n      if (!currentTestCases) {\n        setOutput('No test cases found for this problem.');\n        setIsCorrect(false);\n        return;\n      }\n      let allTestsPassed = true;\n      let testResults = [];\n      for (const testCase of currentTestCases) {\n        try {\n          // Reset stdout for each test case\n          pyodide.runPython(`\n                    import sys\n                    import io\n                    sys.stdout = io.StringIO()\n                `);\n\n          // Different wrapper based on problem ID\n          let wrapper;\n          const problemId = parseInt(id);\n          if (problemId === 1) {\n            wrapper = `\n${code}\n\n# Test case input\nnums = ${JSON.stringify(testCase.input.nums)}\ntarget = ${testCase.input.target}\n\n# Run the solution\nresult = two_sum(nums, target)\nprint(result)\n                    `;\n          } else if (problemId === 2) {\n            wrapper = `\n${code}\n\n# Test case input\nstrs = ${JSON.stringify(testCase.input.strs)}\n\n# Run the solution\nresult = longest_common_prefix(strs)\nprint(result)\n                    `;\n          } else if (problemId === 3) {\n            wrapper = `\n${code}\n\n# Test case input\nnum = ${testCase.input.num}\n\n# Run the solution\nresult = is_palindrome(num)\nprint(str(result).lower())\n                    `;\n          }\n          await pyodide.runPythonAsync(wrapper);\n          const output = pyodide.runPython(\"sys.stdout.getvalue()\").trim();\n\n          // Different comparison logic based on problem ID\n          let isTestPassed;\n          if (problemId === 1) {\n            const result = JSON.parse(output.replace(/\\(/g, '[').replace(/\\)/g, ']'));\n            isTestPassed = arraysEqual(result, testCase.expected);\n          } else if (problemId === 2) {\n            isTestPassed = output === `\"${testCase.expected}\"` || output === `'${testCase.expected}'` || output === testCase.expected;\n          } else if (problemId === 3) {\n            const resultBool = output.trim() === 'true';\n            isTestPassed = resultBool === testCase.expected;\n          }\n          testResults.push({\n            input: testCase.input,\n            expected: testCase.expected,\n            output: problemId === 3 ? output.trim() === 'true' : problemId === 1 ? JSON.parse(output.replace(/\\(/g, '[').replace(/\\)/g, ']')) : output.replace(/['\"]/g, ''),\n            passed: isTestPassed\n          });\n          if (!isTestPassed) {\n            allTestsPassed = false;\n          }\n        } catch (error) {\n          testResults.push({\n            input: testCase.input,\n            error: error.message,\n            passed: false\n          });\n          allTestsPassed = false;\n        }\n      }\n      const resultOutput = formatTestResults(testResults);\n      setOutput(resultOutput);\n      setIsCorrect(allTestsPassed);\n    } catch (error) {\n      setOutput(`Error: ${error.message}`);\n      setIsCorrect(false);\n    } finally {\n      setProcessing(false);\n    }\n  };\n  const formatTestResults = results => {\n    const problemId = parseInt(id);\n    return results.map((result, index) => {\n      if (result.error) {\n        if (problemId === 1) {\n          return `Test Case ${index + 1}: Failed\\nInput: nums=${JSON.stringify(result.input.nums)}, target=${result.input.target}\\nError: ${result.error}\\n`;\n        } else if (problemId === 2) {\n          return `Test Case ${index + 1}: Failed\\nInput: strs=${JSON.stringify(result.input.strs)}\\nError: ${result.error}\\n`;\n        } else if (problemId === 3) {\n          return `Test Case ${index + 1}: Failed\\nInput: num=${result.input.num}\\nError: ${result.error}\\n`;\n        }\n      }\n      if (problemId === 1) {\n        return `Test Case ${index + 1}: ${result.passed ? 'Passed' : 'Failed'}\\nInput: nums=${JSON.stringify(result.input.nums)}, target=${result.input.target}\\nExpected: ${JSON.stringify(result.expected)}\\nGot: ${JSON.stringify(result.output)}\\n`;\n      } else if (problemId === 2) {\n        return `Test Case ${index + 1}: ${result.passed ? 'Passed' : 'Failed'}\\nInput: strs=${JSON.stringify(result.input.strs)}\\nExpected: \"${result.expected}\"\\nGot: \"${result.output}\"\\n`;\n      } else if (problemId === 3) {\n        return `Test Case ${index + 1}: ${result.passed ? 'Passed' : 'Failed'}\\nInput: num=${result.input.num}\\nExpected: ${result.expected}\\nGot: ${result.output}\\n`;\n      }\n    }).join('\\n');\n  };\n\n  // Add initial code template based on problem ID\n  useEffect(() => {\n    const problemId = parseInt(id);\n    if (problemId === 1) {\n      setCode(`def two_sum(nums, target):\n    # Write your solution here\n    # Return indices of two numbers that add up to target\n    # Example: nums = [2,7,11,15], target = 9 should return [0,1]\n    pass`);\n    } else if (problemId === 2) {\n      setCode(`def longest_common_prefix(strs):\n    # Write your solution here\n    # Return the longest common prefix string\n    # Example: [\"flower\", \"flow\", \"flight\"] should return \"fl\"\n    pass`);\n    } else if (problemId === 3) {\n      setCode(`def is_palindrome(num):\n    # Write your solution here\n    # Return True if the number is a palindrome, False otherwise\n    # Example: 121 should return True because it reads the same forward and backward\n    pass`);\n    }\n  }, [id]);\n  if (!currentProblem) {\n    return /*#__PURE__*/_jsxDEV(Div, {\n      children: \"Loading problem...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 332,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(Div, {\n    d: \"flex\",\n    flexDir: \"row\",\n    minH: \"100vh\",\n    p: \"2rem\",\n    children: [/*#__PURE__*/_jsxDEV(Div, {\n      w: \"50%\",\n      p: \"1rem\",\n      border: \"1px solid #e0e0e0\",\n      shadow: \"4\",\n      rounded: \"lg\",\n      children: [/*#__PURE__*/_jsxDEV(Text, {\n        tag: \"h2\",\n        textSize: \"title\",\n        m: {\n          b: \"1rem\"\n        },\n        children: currentProblem.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 339,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Text, {\n        textSize: \"body\",\n        textColor: \"gray700\",\n        m: {\n          b: \"1rem\"\n        },\n        children: currentProblem.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 340,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Text, {\n        textSize: \"caption\",\n        textColor: \"gray500\",\n        m: {\n          b: \"1rem\"\n        },\n        children: [\"Difficulty: \", currentProblem.difficulty]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 343,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        onChange: handleLanguageChange,\n        value: language,\n        style: {\n          marginBottom: '1rem',\n          padding: '0.5rem',\n          borderRadius: '4px',\n          border: '1px solid #e0e0e0',\n          width: '200px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"python\",\n          children: \"Python\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 359,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"java\",\n          children: \"Java\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 360,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 348,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 338,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Div, {\n      w: \"50%\",\n      p: \"1rem\",\n      children: [/*#__PURE__*/_jsxDEV(Editor, {\n        height: \"50vh\",\n        language: language,\n        value: code,\n        onChange: setCode,\n        theme: \"vs-dark\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 366,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Div, {\n        d: \"flex\",\n        justify: \"space-between\",\n        m: {\n          y: \"1rem\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleRunCode,\n          bg: \"info700\",\n          hoverBg: \"info800\",\n          textColor: \"white\",\n          disabled: processing || !pyodide,\n          w: \"45%\",\n          children: processing ? 'Running...' : 'Run Code'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 374,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleSubmitSolution,\n          bg: \"success700\",\n          hoverBg: \"success800\",\n          textColor: \"white\",\n          disabled: processing,\n          w: \"45%\",\n          children: \"Submit Solution\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 384,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 373,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Div, {\n        bg: \"gray100\",\n        p: \"1rem\",\n        rounded: \"md\",\n        children: /*#__PURE__*/_jsxDEV(Text, {\n          tag: \"pre\",\n          textSize: \"body\",\n          children: output\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 396,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 395,\n        columnNumber: 17\n      }, this), isDuelMode && /*#__PURE__*/_jsxDEV(Text, {\n        textSize: \"body\",\n        m: {\n          t: \"1rem\"\n        },\n        children: [\"Time Left: \", Math.floor(timeLeft / 60), \":\", timeLeft % 60 < 10 ? '0' : '', timeLeft % 60]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 401,\n        columnNumber: 21\n      }, this), isCorrect !== null && /*#__PURE__*/_jsxDEV(Text, {\n        textSize: \"body\",\n        textColor: isCorrect ? \"success700\" : \"danger700\",\n        m: {\n          t: \"1rem\"\n        },\n        children: isCorrect ? \"All test cases passed!\" : \"Some test cases failed. Please try again.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 406,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 365,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 336,\n    columnNumber: 9\n  }, this);\n};\n_s(ProblemPage, \"1m3zPy08DXqn8rA+123+ywPFFzc=\", false, function () {\n  return [useParams];\n});\n_c = ProblemPage;\nexport default ProblemPage;\nvar _c;\n$RefreshReg$(_c, \"ProblemPage\");","map":{"version":3,"names":["React","useState","useEffect","useParams","Div","Text","Button","Editor","jsxDEV","_jsxDEV","mockProblems","id","title","description","difficulty","testCases","input","nums","target","expected","strs","num","ProblemPage","isDuelMode","_s","code","setCode","output","setOutput","isCorrect","setIsCorrect","language","setLanguage","timeLeft","setTimeLeft","processing","setProcessing","pyodide","setPyodide","currentProblem","setCurrentProblem","arraysEqual","arr1","arr2","length","sorted1","sort","sorted2","every","value","index","loadPyodide","pyodideInstance","window","indexURL","error","console","problem","find","p","parseInt","timer","setInterval","clearInterval","handleLanguageChange","e","handleRunCode","runPython","runPythonAsync","stdout","message","handleSubmitSolution","currentTestCases","allTestsPassed","testResults","testCase","wrapper","problemId","JSON","stringify","trim","isTestPassed","result","parse","replace","resultBool","push","passed","resultOutput","formatTestResults","results","map","join","children","fileName","_jsxFileName","lineNumber","columnNumber","d","flexDir","minH","w","border","shadow","rounded","tag","textSize","m","b","textColor","onChange","style","marginBottom","padding","borderRadius","width","height","theme","justify","y","onClick","bg","hoverBg","disabled","t","Math","floor","_c","$RefreshReg$"],"sources":["/Users/sabria/Downloads/University/CS321/CR-Docker/CodeRush/frontend-final/src/ProblemPage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Div, Text, Button } from 'atomize';\nimport Editor from \"@monaco-editor/react\";\n\n// Import mockProblems data\nconst mockProblems = [\n    { id: 1, title: \"Two Sum\", description: \"Return indices of two numbers that add up to a target value in an array.\", difficulty: \"Easy\" },\n    { id: 2, title: \"Longest Common Prefix\", description: \"Find the longest common prefix string in an array of strings.\", difficulty: \"Easy\" },\n    { id: 3, title: \"Palindrome Number\", description: \"Determine if a given integer is a palindrome.\", difficulty: \"Easy\" },\n    { id: 4, title: \"Add Two Numbers\", description: \"Add two linked lists representing numbers and return the sum as a linked list.\", difficulty: \"Medium\" },\n    { id: 5, title: \"Longest Palindromic Substring\", description: \"Return the longest palindromic substring in a given string.\", difficulty: \"Medium\" },\n    { id: 6, title: \"Longest Substring Without Repeating Characters\", description: \"Find the length of the longest substring without repeating characters.\", difficulty: \"Medium\" },\n    { id: 7, title: \"Median of Two Sorted Arrays\", description: \"Find the median of two sorted arrays.\", difficulty: \"Hard\" },\n    { id: 8, title: \"Regular Expression Matching\", description: \"Implement regex matching with '.' and '*' for a given pattern and string.\", difficulty: \"Hard\" },\n];\n\nconst testCases = {\n    1: [ // Two Sum\n        {\n            input: {\n                nums: [2, 7, 11, 15],\n                target: 9\n            },\n            expected: [0, 1]\n        },\n        {\n            input: {\n                nums: [3, 2, 4],\n                target: 6\n            },\n            expected: [1, 2]\n        }\n    ],\n\n    2: [ // Longest Common Prefix\n      {\n          input: {\n              strs: [\"flower\", \"flow\", \"flight\"]\n          },\n          expected: \"fl\"\n      },\n      {\n          input: {\n              strs: [\"dog\", \"racecar\", \"car\"]\n          },\n          expected: \"\"\n      },\n      {\n          input: {\n              strs: [\"interspecies\", \"interstellar\", \"interstate\"]\n          },\n          expected: \"inters\"\n      }\n  ],\n\n  3: [ // Palindrome Number test cases\n    {\n        input: {\n            num: 121\n        },\n        expected: true\n    },\n    {\n        input: {\n            num: -121\n        },\n        expected: false\n    },\n    {\n        input: {\n            num: 10\n        },\n        expected: false\n    },\n    {\n        input: {\n            num: 12321\n        },\n        expected: true\n    }\n  ]\n    // Add test cases for other problems as needed\n};\n\nconst ProblemPage = ({ isDuelMode }) => {\n    const { id } = useParams();\n    const [code, setCode] = useState('# Start coding here\\n');\n    const [output, setOutput] = useState('');\n    const [isCorrect, setIsCorrect] = useState(null);\n    const [language, setLanguage] = useState('python');\n    const [timeLeft, setTimeLeft] = useState(900);\n    const [processing, setProcessing] = useState(false);\n    const [pyodide, setPyodide] = useState(null);\n    const [currentProblem, setCurrentProblem] = useState(null);\n\n      // Helper function to compare arrays - definining it before use\n      const arraysEqual = (arr1, arr2) => {\n        if (arr1.length !== arr2.length) return false;\n        const sorted1 = [...arr1].sort();\n        const sorted2 = [...arr2].sort();\n        return sorted1.every((value, index) => value === sorted2[index]);\n    };\n    \n    // Initialize Pyodide\n    useEffect(() => {\n        const loadPyodide = async () => {\n            try {\n                const pyodideInstance = await window.loadPyodide({\n                    indexURL: \"https://cdn.jsdelivr.net/pyodide/v0.24.1/full/\"\n                });\n                setPyodide(pyodideInstance);\n            } catch (error) {\n                console.error('Error loading Pyodide:', error);\n                setOutput('Error loading Python environment');\n            }\n        };\n        loadPyodide();\n    }, []);\n\n    // Load current problem\n    useEffect(() => {\n        const problem = mockProblems.find(p => p.id === parseInt(id));\n        setCurrentProblem(problem);\n    }, [id]);\n\n    // Timer for duel mode\n    useEffect(() => {\n        if (isDuelMode && timeLeft > 0) {\n            const timer = setInterval(() => setTimeLeft(timeLeft - 1), 1000);\n            return () => clearInterval(timer);\n        }\n    }, [isDuelMode, timeLeft]);\n\n    const handleLanguageChange = (e) => {\n        setLanguage(e.target.value);\n        setCode(e.target.value === 'python' ? '# Start coding here\\n' : '// Start coding here\\n');\n    };\n\n    const handleRunCode = async () => {\n        if (!pyodide) {\n            setOutput('Python environment is not ready yet. Please wait...');\n            return;\n        }\n\n        setProcessing(true);\n        try {\n            // Redirect Python's stdout to capture print statements\n            pyodide.runPython(`\n                import sys\n                import io\n                sys.stdout = io.StringIO()\n            `);\n            \n            await pyodide.runPythonAsync(code);\n            const stdout = pyodide.runPython(\"sys.stdout.getvalue()\");\n            setOutput(stdout || 'No output');\n        } catch (error) {\n            setOutput(`Error: ${error.message}`);\n        } finally {\n            setProcessing(false);\n        }\n    };\n\n    const handleSubmitSolution = async () => {\n      if (!pyodide) {\n        setOutput('Python environment is not ready yet. Please wait...');\n        return;\n    }\n\n    setProcessing(true);\n    try {\n        const currentTestCases = testCases[parseInt(id)];\n        if (!currentTestCases) {\n            setOutput('No test cases found for this problem.');\n            setIsCorrect(false);\n            return;\n        }\n\n        let allTestsPassed = true;\n        let testResults = [];\n\n        for (const testCase of currentTestCases) {\n            try {\n                // Reset stdout for each test case\n                pyodide.runPython(`\n                    import sys\n                    import io\n                    sys.stdout = io.StringIO()\n                `);\n\n                // Different wrapper based on problem ID\n                let wrapper;\n                const problemId = parseInt(id);\n                \n                if (problemId === 1) {\n                    wrapper = `\n${code}\n\n# Test case input\nnums = ${JSON.stringify(testCase.input.nums)}\ntarget = ${testCase.input.target}\n\n# Run the solution\nresult = two_sum(nums, target)\nprint(result)\n                    `;\n                } else if (problemId === 2) {\n                    wrapper = `\n${code}\n\n# Test case input\nstrs = ${JSON.stringify(testCase.input.strs)}\n\n# Run the solution\nresult = longest_common_prefix(strs)\nprint(result)\n                    `;\n                } else if (problemId === 3) {\n                    wrapper = `\n${code}\n\n# Test case input\nnum = ${testCase.input.num}\n\n# Run the solution\nresult = is_palindrome(num)\nprint(str(result).lower())\n                    `;\n                }\n\n                await pyodide.runPythonAsync(wrapper);\n                const output = pyodide.runPython(\"sys.stdout.getvalue()\").trim();\n                \n                // Different comparison logic based on problem ID\n                let isTestPassed;\n                if (problemId === 1) {\n                    const result = JSON.parse(output.replace(/\\(/g, '[').replace(/\\)/g, ']'));\n                    isTestPassed = arraysEqual(result, testCase.expected);\n                } else if (problemId === 2) {\n                    isTestPassed = output === `\"${testCase.expected}\"` || \n                                 output === `'${testCase.expected}'` || \n                                 output === testCase.expected;\n                } else if (problemId === 3) {\n                    const resultBool = output.trim() === 'true';\n                    isTestPassed = resultBool === testCase.expected;\n                }\n\n                testResults.push({\n                    input: testCase.input,\n                    expected: testCase.expected,\n                    output: problemId === 3 ? output.trim() === 'true' :\n                           problemId === 1 ? JSON.parse(output.replace(/\\(/g, '[').replace(/\\)/g, ']')) :\n                           output.replace(/['\"]/g, ''),\n                    passed: isTestPassed\n                });\n\n                if (!isTestPassed) {\n                    allTestsPassed = false;\n                }\n\n            } catch (error) {\n                testResults.push({\n                    input: testCase.input,\n                    error: error.message,\n                    passed: false\n                });\n                allTestsPassed = false;\n            }\n        }\n\n        const resultOutput = formatTestResults(testResults);\n        setOutput(resultOutput);\n        setIsCorrect(allTestsPassed);\n\n    } catch (error) {\n        setOutput(`Error: ${error.message}`);\n        setIsCorrect(false);\n    } finally {\n        setProcessing(false);\n    }\n};\n\nconst formatTestResults = (results) => {\n    const problemId = parseInt(id);\n    return results.map((result, index) => {\n        if (result.error) {\n            if (problemId === 1) {\n                return `Test Case ${index + 1}: Failed\\nInput: nums=${JSON.stringify(result.input.nums)}, target=${result.input.target}\\nError: ${result.error}\\n`;\n            } else if (problemId === 2) {\n                return `Test Case ${index + 1}: Failed\\nInput: strs=${JSON.stringify(result.input.strs)}\\nError: ${result.error}\\n`;\n            } else if (problemId === 3) {\n                return `Test Case ${index + 1}: Failed\\nInput: num=${result.input.num}\\nError: ${result.error}\\n`;\n            }\n        }\n        \n        if (problemId === 1) {\n            return `Test Case ${index + 1}: ${result.passed ? 'Passed' : 'Failed'}\\nInput: nums=${JSON.stringify(result.input.nums)}, target=${result.input.target}\\nExpected: ${JSON.stringify(result.expected)}\\nGot: ${JSON.stringify(result.output)}\\n`;\n        } else if (problemId === 2) {\n            return `Test Case ${index + 1}: ${result.passed ? 'Passed' : 'Failed'}\\nInput: strs=${JSON.stringify(result.input.strs)}\\nExpected: \"${result.expected}\"\\nGot: \"${result.output}\"\\n`;\n        } else if (problemId === 3) {\n            return `Test Case ${index + 1}: ${result.passed ? 'Passed' : 'Failed'}\\nInput: num=${result.input.num}\\nExpected: ${result.expected}\\nGot: ${result.output}\\n`;\n        }\n    }).join('\\n');\n};\n\n// Add initial code template based on problem ID\nuseEffect(() => {\n    const problemId = parseInt(id);\n    if (problemId === 1) {\n        setCode(`def two_sum(nums, target):\n    # Write your solution here\n    # Return indices of two numbers that add up to target\n    # Example: nums = [2,7,11,15], target = 9 should return [0,1]\n    pass`);\n    } else if (problemId === 2) {\n        setCode(`def longest_common_prefix(strs):\n    # Write your solution here\n    # Return the longest common prefix string\n    # Example: [\"flower\", \"flow\", \"flight\"] should return \"fl\"\n    pass`);\n    } else if (problemId === 3) {\n      setCode(`def is_palindrome(num):\n    # Write your solution here\n    # Return True if the number is a palindrome, False otherwise\n    # Example: 121 should return True because it reads the same forward and backward\n    pass`);\n    }\n}, [id]);\n\n    if (!currentProblem) {\n        return <Div>Loading problem...</Div>;\n    }\n\n    return (\n        <Div d=\"flex\" flexDir=\"row\" minH=\"100vh\" p=\"2rem\">\n            {/* Left Side: Problem Details */}\n            <Div w=\"50%\" p=\"1rem\" border=\"1px solid #e0e0e0\" shadow=\"4\" rounded=\"lg\">\n                <Text tag=\"h2\" textSize=\"title\" m={{ b: \"1rem\" }}>{currentProblem.title}</Text>\n                <Text textSize=\"body\" textColor=\"gray700\" m={{ b: \"1rem\" }}>\n                    {currentProblem.description}\n                </Text>\n                <Text textSize=\"caption\" textColor=\"gray500\" m={{ b: \"1rem\" }}>\n                    Difficulty: {currentProblem.difficulty}\n                </Text>\n                \n                {/* Language Selection */}\n                <select\n                    onChange={handleLanguageChange}\n                    value={language}\n                    style={{\n                        marginBottom: '1rem',\n                        padding: '0.5rem',\n                        borderRadius: '4px',\n                        border: '1px solid #e0e0e0',\n                        width: '200px'\n                    }}\n                >\n                    <option value=\"python\">Python</option>\n                    <option value=\"java\">Java</option>\n                </select>\n            </Div>\n\n            {/* Right Side: Code Editor and Output */}\n            <Div w=\"50%\" p=\"1rem\">\n                <Editor\n                    height=\"50vh\"\n                    language={language}\n                    value={code}\n                    onChange={setCode}\n                    theme=\"vs-dark\"\n                />\n                <Div d=\"flex\" justify=\"space-between\" m={{ y: \"1rem\" }}>\n                    <Button \n                        onClick={handleRunCode} \n                        bg=\"info700\"\n                        hoverBg=\"info800\"\n                        textColor=\"white\"\n                        disabled={processing || !pyodide}\n                        w=\"45%\"\n                    >\n                        {processing ? 'Running...' : 'Run Code'}\n                    </Button>\n                    <Button \n                        onClick={handleSubmitSolution}\n                        bg=\"success700\"\n                        hoverBg=\"success800\"\n                        textColor=\"white\"\n                        disabled={processing}\n                        w=\"45%\"\n                    >\n                        Submit Solution\n                    </Button>\n                </Div>\n                <Div bg=\"gray100\" p=\"1rem\" rounded=\"md\">\n                    <Text tag=\"pre\" textSize=\"body\">\n                        {output}\n                    </Text>\n                </Div>\n                {isDuelMode && (\n                    <Text textSize=\"body\" m={{ t: \"1rem\" }}>\n                        Time Left: {Math.floor(timeLeft / 60)}:{timeLeft % 60 < 10 ? '0' : ''}{timeLeft % 60}\n                    </Text>\n                )}\n                {isCorrect !== null && (\n                    <Text \n                        textSize=\"body\" \n                        textColor={isCorrect ? \"success700\" : \"danger700\"} \n                        m={{ t: \"1rem\" }}\n                    >\n                        {isCorrect ? \"All test cases passed!\" : \"Some test cases failed. Please try again.\"}\n                    </Text>\n                )}\n            </Div>\n        </Div>\n    );\n};\n\nexport default ProblemPage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}